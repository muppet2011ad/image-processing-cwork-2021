# Usage Examples

* All of these calls show only the final image for each use of the filter, as I did not see the FAQ requirement for intermediate steps to be shown until a day before the deadline, at which point I did not have time to rewrite my filters to support this (1 and 2 being particularly awkward to get intermediate steps for) given that I also needed to work on SE coursework.
* All of the command line calls take the file name of the image, HOWEVER all python calls take the image data as returned by cv2.imread()
* Press 'x' to dismiss opencv2 windows at any time.

## From the command line

* My program was originally written to be run from the command line, as that is how I read the coursework.
* I was only made aware of the FAQ clarification contradicting this a few days before the deadline, so these methods of calling it are still present.
* These are mostly identical to the Python function calls I will detail later, though for problem4(), the cmd call displays one image, whereas the python function displays all possible interpolations/prefiltering and the image subtraction.

### Problem 1

* python jsbl33.py 1 [image_file]
    * Performs light leak with default parameters (darkening coefficient = 2, blending coefficient = 0.8, mode = simple)
* python jsbl33.py 1 [image_file] [simple/rainbow]
    * Performs light leak with default parameters (darkening coefficient = 2, blending coefficient = 0.8) and given mode (simple or rainbow)
    * e.g. "python jsbl33.py 1 input_1.jpg rainbow"
* python jsbl33.py 1 [image_file] [simple/rainbow] [darkening_coefficient] [blending_coefficient]
    * Performs light leak with given parameters
    * e.g. "python jsbl33.py 1 input_1.jpg rainbow 1.8 0.82"

### Problem 2

* python jsbl33.py 2 [image_file]
    * Performs pencil filter with default parameters (blending coefficient = 0.6, colour = b/w)
* python jsbl33.py 2 [image_file] [blending_coefficient]
    * Performs pencil filter with given blending coefficient in black and white
* python jsbl33.py 2 [image_file] [blending_coefficient] colour
    * Performs pencil filter in colour with given blending_coefficient
    * e.g. "python jsbl33.py 2 input_1.jpg 0.7 colour"

### Problem 3

* python jsbl33.py 3 [image_file]
    * Beautifies image with default parameters (colour sigma = 20, space sigma = 10, warms image)
* python jsbl33.py 3 [image_file] [colour_sigma] [space_sigma]
    * Beautifies image with given parameters and defaults to warming the image
* python jsbl33.py 3 [image_file] [colour_sigma] [space_sigma] [warm/cold]
    * Beautifies image with given parameters and will warm/cool the image
    * e.g. "python jsbl33.py 3 input_1.jpg 15 5 cold"

### Problem 4

* python jsbl33.py 4 [image_file]
    * Applies swirl filter using default parameters (angle = 3*pi/4, radius = 150, interpolation = "nn", no prefiltering)
* python jsbl33.py 4 [image_file] [angle] [radius]
    * Applies swirl filter using given parameters, defaults for others
* python jsbl33.py 4 [image_file] [angle] [radius] [nn/bi]
    * Applies swirl filter using given parameters and interpolation mode (nn = nearest neighbour, bi = bilinear interpolation)
    * e.g. "python jsbl33.py 4 input_1.jpg 3 200 bi"
* python jsbl33.py 4 [image_file] [angle] [radius] [nn/bi] prefilter
    * As above but will apply a Gaussian low-pass filter before applying the swirl filter
    * e.g. "python jsbl33.py 4 input_1.jpg 3 200 bi prefilter"

## Python calls

* It should be noted that for all of these python calls, the "img" parameter is image *data* as returned by cv2.imread(), not a filename as it is for my cmd calls.

### Problem 1

* The function call is "problem1(img, bright_factor, blend_factor, rainbow)" where
    * img is the image data of the source image from cv2.imread()
    * bright_factor is the coefficient by which the image will be darkened and the portion in the light leak will be brightened. Default is 2.
    * blend_factor is the blending coefficient for adding the image and the mask. Default is 0.8, though any value between 0 and 1 is valid.
    * rainbow is a Boolean that determines whether or not a simple or rainbow filter will be used. Default is False.
    * All parameters are optional other than img
* e.g. "problem1(img_data, 1.8, 0.7, True)"
* e.g. "problem1(img_data, rainbow=True)"

### Problem 2

* The function call is "problem2(img, blend_factor, colour)" where
    * img is the image data of the source image from cv2.imread()
    * blend_factor is the blending coefficient for the pencil filter mask. Default is 0.6, though any value between 0 and 1 is valid.
    * colour is a Boolean that determines whether or not the filter will be applied once in black/white, or twice with two colour channels to produce a coloured output. Default is False.
    * All parameters are optional other than img
* e.g. "problem2(img_data)"
* e.g. "problem2(img_data, 0.5, True)"
* e.g. "problem2(img_data, colour=True)"

### Problem 3

* The function call is "problem3(img, colour_sigma, space_sigma, mode)" where
    * img is the image data of the source image from cv2.imread()
    * colour_sigma is the standard deviation of the colour component of the bilateral filtering. Default is 20
    * space_sigma is the standard deviation of the distance component of the bilateral filtering. Default is 10
    * mode is a string that determines whether the image should be cooled or warmed. Default is "warm", though "cold" is also valid.
    * All parameters are optional other than img
* e.g. "problem3(img_data)"
* e.g. "problem3(img_data, 15, 15)"
* e.g. "problem3(img_data, 15, 15, "cold")"

### Problem 4

* This function, rather than operating on a single image like all the others, outputs the result of the filter with several different interpolation and filtering options, as well as inverting a swirl and subtracting it from the original image.
* The function call is "problem4(img, angle, radius)" where
    * img is the image data of the source image from cv2.imread()
    * angle is the angle of the swirl at the centre, in radians. Default is 3pi/4
    * radius is the maximum distance from the centre that the filter will affect. Default is 150
    * All parameters are optional other than img
* e.g. "problem4(img_data)"
* e.g. "problem4(img_data, 2)"
* e.g. "problem4(img_data, 2, 200)"